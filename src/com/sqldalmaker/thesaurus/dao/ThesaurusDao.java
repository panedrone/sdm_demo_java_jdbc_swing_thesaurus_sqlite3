package com.sqldalmaker.thesaurus.dao;

import com.sqldalmaker.DataStore;

import com.sqldalmaker.thesaurus.dto.RelatedWord;
import com.sqldalmaker.thesaurus.dto.Word;
import java.util.ArrayList;
import java.util.List;

// Code generated by a tool. DO NOT EDIT.
// https://sqldalmaker.sourceforge.net/

public class ThesaurusDao {

    protected final DataStore ds;

    public ThesaurusDao(DataStore ds) {
        this.ds = ds;
    }

    public Integer getTotalWordsCount() throws Exception {
        String sql = "select count(*) from WORDS";
        return ds.query(Integer.class, sql);
    }

    public List<Word> getWordsByKey(String key) throws Exception {
        String sql = "select * from WORDS" +
        "\n where UPPER(w_word) like UPPER(?)" +
        "\n order by w_word";
        final List<Word> res = new ArrayList<Word>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Word obj = new Word();
                obj.setWId(rd.getInteger("W_ID"));  // t <- q
                obj.setWWord(rd.getString("W_WORD"));  // t <- q
                res.add(obj);
            }
        }, key);
        return res;
    }

    public List<RelatedWord> getRelatedWords(Integer w_id) throws Exception {
        String sql = "select " +
        "\n rg_part_of_speech," +
        "\n rg_order," +
        "\n rgw.* from RELATED_GROUPS rg inner join RELATED_GROUP_WORDS rgw on rg.rg_id = rgw.rg_id" +
        "\n where rg.w_id = ?" +
        "\n order by rg_id, rg.rg_order, rgw.rgw_order";
        final List<RelatedWord> res = new ArrayList<RelatedWord>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                RelatedWord obj = new RelatedWord();
                obj.setRgPartOfSpeech(rd.getValue(Object.class, "RG_PART_OF_SPEECH"));  // q <- q
                obj.setRgOrder(rd.getValue(Object.class, "RG_ORDER"));  // q <- q
                obj.setRgwId(rd.getValue(Object.class, "RGW_ID"));  // q <- q
                obj.setRgId(rd.getValue(Object.class, "RG_ID"));  // q <- q
                obj.setRgwWord(rd.getValue(Object.class, "RGW_WORD"));  // q <- q
                obj.setRgwNote(rd.getValue(Object.class, "RGW_NOTE"));  // q <- q
                obj.setRgwOrder(rd.getValue(Object.class, "RGW_ORDER"));  // q <- q
                res.add(obj);
            }
        }, w_id);
        return res;
    }
}